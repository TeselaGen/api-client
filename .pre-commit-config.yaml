---
# Install pre-commit
#   python3 -m pip install --upgrade --no-cache-dir --no-warn-script-location --trusted-host pypi.python.org pre-commit

# Install the pre-commit hooks below with
#   pre-commit install --install-hooks

# Auto-update the version of the hooks with
#   pre-commit autoupdate

# Run the hooks on all files with
#   pre-commit run --all-files

# References:
#   https://pre-commit.com/#usage-in-continuous-integration
#
#   https://github.com/google/yapf
#   https://github.com/NVIDIA/NVTabular/blob/main/.pre-commit-config.yaml
#   https://github.com/google/jax/blob/main/.pre-commit-config.yaml
#   https://github.com/facebookresearch/mtrl/blob/main/.pre-commit-config.yaml
#   https://github.com/PyCQA/pylint/blob/main/.pre-commit-config.yaml
#   https://github.com/nbQA-dev/nbQA/blob/master/.pre-commit-config.yaml
#   https://github.com/google/pre-commit-tool-hooks/blob/trunk/.pre-commit-config.yaml

# pre-commit autoupdate
# pre-commit gc && pre-commit install --install-hooks && pre-commit gc
#
# pre-commit run --all-files
#
# pre-commit run --all-files --show-diff-on-failure
#
# pre-commit run mypy --all-files

# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

# default_language_version:
#   # force all unspecified python hooks to run python3
#   python: python3.9

# whether to fail on first error or continue
fail_fast: false

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.0.1
    hooks:
      - id: check-ast
        name: "[check]: files parse as valid python"

      - id: check-builtin-literals
        name: "[check]: builtin type constructor use (Python)"

      - id: trailing-whitespace
        name: "  [fix]: trim trailing whitespace"
        args: [
            # preserve Markdown hard line breaks
            --markdown-linebreak-ext=md,
          ]

      - id: check-docstring-first
        name: "[check]: docstring must be first in a module (Python)"

      - id: check-added-large-files
        name: "[check]: added large files"

      - id: check-json
        # does not support comments (JSONC)
        # does not support trailing commas
        name: "[check]: files are valid JSON"
        exclude: (cSpell.json|.devcontainer/|.vscode/)

      - id: check-toml
        name: "[check]: files are valid TOML"

      - id: check-yaml
        name: "[check]: files are valid YAML"

      - id: debug-statements
        name: "[check]: debug statements (Python)"

      - id: check-merge-conflict
        name: "[check]: merge conflict markers"

      - id: double-quote-string-fixer
        name: "  [fix]: double-quoted strings to single-quoted strings (Python)"
        stages: [manual]

      - id: end-of-file-fixer
        name: "  [fix]: fix missing newline at end of file"
        exclude: (.*\.csv|.*\.txt)

      - id: fix-encoding-pragma
        name: "  [fix]: encoding pragma (Python)"
        args: [
            # use '--remove' in a python3-only codebase
            --remove,
          ]

      - id: mixed-line-ending
        name: "  [fix]: mixed line endings"
        args: [
            # Forces to replace line ending by LF.
            --fix=lf,
          ]
        # stages: [manual]

      - id: name-tests-test
        name: "[check]: test files should be named test*.py"
        args: [
            # use '--django' to match 'test*.py' instead of '*_test.py'
            --django,
          ]

      - id: detect-private-key
        name: "[check]: detect private key"

      - id: fix-byte-order-marker
        name: "  [fix]: remove UTF-8 byte order marker"

      - id: no-commit-to-branch
        name: "[check]: no commit to branch"
        args: [
            # Protect specific branches from direct checkins
            --branch,
            master,
            --branch,
            main,
          ]

      - id: forbid-new-submodules
        name: "[check]: forbid new submodules"

      - id: check-case-conflict
        name: "[check]: filename case conflicts"

  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.9.0
    hooks:
      - id: python-check-blanket-noqa
        name: "[check]: blanket noqa"

      - id: python-check-blanket-type-ignore
        name: "[check]: blanket type ignore"

      - id: python-check-mock-methods
        name: "[check]: not-real mock methods"

      - id: python-no-eval
        name: "[check]: no eval()"

      - id: python-no-log-warn
        name: "[check]: no logger.warn, use logger.warning"

      - id: python-use-type-annotations
        name: "[check]: use type annotations, not comments"

      - id: text-unicode-replacement-char
        name: "[check]: no unicode replacement chars"

  # python3 -m pip install --upgrade --no-cache-dir --no-warn-script-location --trusted-host pypi.python.org codespell
  - repo: https://github.com/codespell-project/codespell
    rev: v2.1.0
    hooks:
      - id: codespell
        alias: check-misspellings
        name: "[check]: spell check [codespell]"
        # args: [--config=.codespellrc, --ignore-words=.codespellignore]
        # stages: [manual]

      - id: codespell
        alias: fix-misspellings
        name: "  [fix]: spell check [codespell]"
        args: [
            # --config=.codespellrc,
            # --ignore-words=.codespellignore,
            --write-changes,
          ]
        stages: [manual]

  - repo: https://github.com/myint/autoflake
    rev: v1.4
    hooks:
      - id: autoflake
        alias: check-unused-imports
        name: "[check]: unused imports (Python) [autoflake]"
        args: [
            # --expand-star-imports,
            # --remove-duplicate-keys,
            # --remove-unused-variables,
            --ignore-init-module-imports,
            --remove-all-unused-imports,
            # --verbose,
            --check,
          ]
        stages: [manual]

      - id: autoflake
        alias: remove-unused-imports
        name: "  [fix]: remove unused imports (Python) [autoflake]"
        args: [
            # --expand-star-imports,
            # --remove-duplicate-keys,
            # --remove-unused-variables,
            --ignore-init-module-imports,
            --remove-all-unused-imports,
            # --verbose,
            --in-place,
          ]
        # stages: [manual]

  - repo: https://github.com/pre-commit/mirrors-autopep8
    rev: v1.5.7
    hooks:
      - id: autopep8
        alias: check-pep8
        name: "[check]: PEP 8 (Python) [autopep8]"
        args: [
            # "--select=E26,E265,E266,E731",
            # --jobs=8,
            --jobs=0,
            --aggressive,
            --aggressive,
            --aggressive,
            --experimental,
            --max-line-length=119,
            --diff,
            --exit-code,
          ]
        # stages: [manual]

      - id: autopep8
        alias: fix-pep8
        name: "  [fix]: PEP 8 (Python) [autopep8]"
        args: [
            # "--select=E26,E265,E266,E731",
            # --jobs=8,
            --jobs=0,
            --aggressive,
            --aggressive,
            --aggressive,
            --experimental,
            --max-line-length=119,
            --in-place,
          ]
        stages: [manual]

  - repo: https://github.com/myint/docformatter
    rev: v1.4
    hooks:
      - id: docformatter
        alias: check-docstrings
        name: "[check]: docstring PEP 257 (Python) [docformatter]"
        args: [--wrap-summaries=119, --wrap-descriptions=119, --check]
        stages: [manual]

      - id: docformatter
        alias: fix-docstrings
        name: "  [fix]: docstring PEP 257 (Python) [docformatter]"
        args: [--wrap-summaries=119, --wrap-descriptions=119, --in-place]
        # stages: [manual]

  # - repo: https://github.com/pre-commit/mirrors-isort
  #   rev: v5.9.3
  - repo: https://github.com/PyCQA/isort
    rev: 5.10.1
    hooks:
      - id: isort
        alias: check-imports-order
        name: "[check]: imports order (Python) [isort]"
        args: [--jobs=8, --check]
        stages: [manual]

      - id: isort
        alias: fix-imports-order
        name: "  [fix]: imports order (Python) [isort]"
        args: [--jobs=8]
        # stages: [manual]

  # additional_dependencies: [toml]
  - repo: https://github.com/pre-commit/mirrors-yapf
    rev: v0.31.0
    hooks:
      - id: yapf
        name: "  [fix]: format code (Python) [yapf]"

  - repo: https://github.com/asottile/add-trailing-comma
    rev: v2.2.1
    hooks:
      - id: add-trailing-comma
        name: "  [fix]: trailing commas (Python) [add-trailing-comma]"
        args: [--py36-plus]
        stages: [manual]

  # NOTE: Probably pair with https://github.com/snok/pep585-upgrade
  - repo: https://github.com/asottile/pyupgrade
    rev: v2.29.1
    hooks:
      - id: pyupgrade
        name: "  [fix]: upgrade syntax (Python) [pyupgrade]"
        args: [--py36-plus, --py37-plus]
        # stages: [manual]

  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.1
    hooks:
      - id: bandit
        name: "[check]: security (Python) [bandit]"
        args: [
            # exit with 0, even with results found
            # --exit-zero
            # only show output in the case of an error
            "--silent",
            # report only issues of a given confidence level or higher (-i for LOW, -ii for MEDIUM, -iii for HIGH)
            # "-ii",
            # report only issues of a given severity level or higher  (-l for LOW, -ll for MEDIUM, -lll for HIGH)
            "-ll",
            # optional config file to use for selecting plugins and overriding defaults
            "--configfile=bandit.yml",
            # path to a .bandit file that supplies command line arguments
            "--ini=.bandit",
          ]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v0.910-1
    hooks:
      - id: mypy
        name: "[check]: type check (Python) [mypy]"
        # args: [--config-file=mypy.ini]
        additional_dependencies: [
            # tokenize-rt,
            # types-pkg_resources,
            # types-toml,
            # types-PyYAML>="6.0.1",
            # types-requests>="2.26.0",
            # types-setuptools>="57.4.3",
            types-all>="1.0.0",
          ]
        stages: [manual]

  - repo: https://github.com/PyCQA/flake8
    rev: 4.0.1
    hooks:
      - id: flake8
        alias: check-flake8-strict
        name: "[check]: PEP 8 (Python) [flake8]"
        args:
          ["--format=%(path)s:%(row)d:%(col)d, %(code).1s, %(code)s:%(text)s"]
        additional_dependencies: [
            #
            bandit>=1.7.1,
            cohesion>=1.0.0,
            pep8>=1.7.1,
            pycodestyle>=2.8.0,
            pydocstyle>=6.1.1,
            radon>=5.1.0,
            tryceratops>=1.0.0,
            mccabe>=0.6.1,
            #
            pep8-naming>=0.12.1,
            #
            flake8-bandit>=2.1.2,
            flake8-broken-line>=0.4.0,
            flake8-bugbear>=21.11.28,
            flake8-commas>=2.1.0,
            flake8-comprehensions>=3.7.0,
            flake8-copyright>=0.2.2,
            flake8-debugger>=4.0.0,
            flake8-docstrings>=1.6.0,
            flake8-eradicate>=1.2.0,
            flake8-executable>=2.1.1,
            flake8-implicit-str-concat>=0.2.0,
            flake8-logging-format>=0.6.0,
            flake8-polyfill>=1.0.2,
            flake8-print>=4.0.0,
            flake8-pytest-style>=1.5.1,
            flake8-use-pathlib>=0.2.1,
          ]
        stages: [manual]

  - repo: https://github.com/koalaman/shellcheck-precommit
    # sudo apt-get install shellcheck
    rev: v0.8.0
    hooks:
      - id: shellcheck
        name: "[check]: static analysis (shell) [shellcheck]"
        args: [
            # Optionally only show errors and warnings
            # "--severity=warning", # error, warning, info, style
            "--color=always",
            #  Format output.
            #       tty (Plain text, human readable output. This is the default.)
            #       gcc ( GCC compatible output. Useful for editors that support compiling and showing syntax errors.)
            #       checkstyle
            #       diff (Auto-fixes in unified diff format.
            #             Can be piped to 'git apply' or 'patch -p1' to automatically apply fixes.)
            #       json1
            #       json
            #       quiet
            # "--format=gcc",
            "--format=tty",
          ]
        stages: [manual]

  - repo: https://github.com/econchick/interrogate
    rev: 1.5.0
    hooks:
      - id: interrogate
        alias: check-code-docstrings-coverage
        name: "[check]: (code) docstring coverage (Python) [interrogate]"
        args: [
            # Do not print output
            # --quiet,
            # Toggle color output on/off when printing to stdout.
            --color,
            # Omit reporting files that have 100% documentation coverage.
            --omit-covered-files,
            # Ignore `__init__.py` modules.
            --ignore-init-module,
            # Fail when coverage % is less than a given amount.
            --fail-under=100,
            # --fail-under=95,
            # --fail-under=50,
            -vv,
          ]
        # files: ^teselagen/
        # excluding files also exclude them from the docstring coverage calculation
        #   NOTE: mark regex as verbose ( https://github.com/psf/black/issues/395#issuecomment-499630129 )
        exclude: |
          (?x)(
              tests/|
              setup\.py|
              __init__\.py
          )
        stages: [manual]

      - id: interrogate
        alias: check-tests-docstrings-coverage
        name: "[check]: (tests) docstring coverage (Python) [interrogate]"
        args: [
            # Do not print output
            # --quiet,
            # Toggle color output on/off when printing to stdout.
            --color,
            # Omit reporting files that have 100% documentation coverage.
            --omit-covered-files,
            # Ignore `__init__.py` modules.
            --ignore-init-module,
            # Fail when coverage % is less than a given amount.
            --fail-under=100,
            # --fail-under=95,
            # --fail-under=50,
            -vv,
          ]
        files: .*/tests/
        # excluding files also exclude them from the docstring coverage calculation
        #   NOTE: mark regex as verbose ( https://github.com/psf/black/issues/395#issuecomment-499630129 )
        exclude: |
          (?x)(
              __init__\.py
          )
        stages: [manual]

      - id: interrogate
        alias: check-docstrings-coverage
        name: "[check]: docstring coverage (Python) [interrogate]"
        args: [
            # Do not print output
            # --quiet,
            # Toggle color output on/off when printing to stdout.
            --color,
            # Omit reporting files that have 100% documentation coverage.
            --omit-covered-files,
            # Ignore `__init__.py` modules.
            --ignore-init-module,
            # Fail when coverage % is less than a given amount.
            --fail-under=100,
            # --fail-under=95,
            # --fail-under=50,
            -vv,
          ]
        files: .*
        # excluding files also exclude them from the docstring coverage calculation
        #   NOTE: mark regex as verbose ( https://github.com/psf/black/issues/395#issuecomment-499630129 )
        exclude: |
          (?x)(
              __init__\.py
          )
        stages: [manual]

  # Alterantive: https://github.com/igorshubovych/markdownlint-cli
  - repo: https://github.com/markdownlint/markdownlint
    rev: v0.11.0
    hooks:
      - id: markdownlint
        alias: check-markdown-style
        name: "[check]: check markdown style issues [markdownlint]"
        args: [
            # --verbose,
            --warnings,
          ]
        # stages: [manual]

  - repo: https://github.com/asottile/yesqa
    rev: v1.3.0
    hooks:
      - id: yesqa
        alias: remove-unncessary-noqa-comments
        name: "[fix]: remove unnecessary noqa comments [yesqa]"
        stages: [manual]

  # NOTE: Probably pair with https://github.com/jumanjihouse/pre-commit-hook-yamlfmt
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.26.3
    hooks:
      - id: yamllint
        alias: check-yaml-style
        name: "[check]: check yaml style issues [yamllint]"
        # stages: [manual]

  - repo: https://github.com/asottile/dead
    rev: v1.4.0
    hooks:
      - id: dead
        alias: check-dead-code
        name: "[check]: detect dead code [dead]"
        args: [--tests=(tests/|test_utils\.py)]
        stages: [manual]

  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.2.2
    hooks:
      # - id: nbqa-black

      - id: nbqa-check-ast
        name: "[check]: cells parse as valid python (Notebooks) [nbqa-check-as]"

      - id: nbqa-flake8
        alias: nbqa-flake8-strict
        name: "[check]: check code style issues (Notebooks) [nbqa-flake8]"
        additional_dependencies: [
            #
            bandit>=1.7.1,
            cohesion>=1.0.0,
            pep8>=1.7.1,
            pycodestyle>=2.8.0,
            pydocstyle>=6.1.1,
            radon>=5.1.0,
            tryceratops>=1.0.0,
            mccabe>=0.6.1,
            #
            pep8-naming>=0.12.1,
            #
            flake8-bandit>=2.1.2,
            flake8-broken-line>=0.4.0,
            flake8-bugbear>=21.11.28,
            flake8-commas>=2.1.0,
            flake8-comprehensions>=3.7.0,
            flake8-copyright>=0.2.2,
            flake8-debugger>=4.0.0,
            flake8-docstrings>=1.6.0,
            flake8-eradicate>=1.2.0,
            flake8-executable>=2.1.1,
            flake8-implicit-str-concat>=0.2.0,
            flake8-logging-format>=0.6.0,
            flake8-polyfill>=1.0.2,
            flake8-print>=4.0.0,
            flake8-pytest-style>=1.5.1,
            flake8-use-pathlib>=0.2.1,
          ]
        stages: [manual]

      - id: nbqa-isort
        name: "  [fix]: sort imports (Notebooks) [nbqa-isort]"
        args: [--jobs=8]

      - id: nbqa-mypy
        name: "[check]: type check (Notebooks) [nbqa-mypy]"
        # args: [--config-file=mypy.ini]
        additional_dependencies: [
            # tokenize-rt,
            # types-pkg_resources,
            # types-toml,
            # types-PyYAML>="6.0.1",
            # types-requests>="2.26.0",
            # types-setuptools>="57.4.3",
            types-all>="1.0.0",
          ]
        stages: [manual]

      - id: nbqa-pylint
        name: "[check]: static code analysis (Notebooks) [nbqa-pylint]"
        stages: [manual]

      - id: nbqa-pyupgrade
        name: "  [fix]: upgrade syntax (Notebooks) [nbqa-pyupgrade]"
        args: [--py37-plus, --py36-plus]
        # stages: [manual]

      - id: nbqa-autopep8
        name: "  [fix]: PEP 8 (Notebooks) [nbqa-autopep8]"
        args: [
            # "--select=E26,E265,E266,E731",
            # --jobs=8,
            --jobs=0,
            --aggressive,
            --aggressive,
            --aggressive,
            --experimental,
            --max-line-length=119,
            --in-place,
          ]

      - id: nbqa-yapf
        name: "  [fix]: format code (Notebooks) [nbqa-yapf]"

      # - id: nbqa-pydocstyle

  # - repo: https://github.com/mwouts/jupytext
  #   rev: v1.13.1.2
  #   hooks:
  #     - id: jupytext
  #       description: Jupyter Notebooks as Markdown Documents, Julia, Python or R scripts
  #       args: [--sync]

  # - repo: https://github.com/terrencepreilly/darglint
  #   rev: v1.8.1
  #   hooks:
  #     - id: darglint

  - repo: meta
    hooks:
      - id: check-hooks-apply
      - id: check-useless-excludes
